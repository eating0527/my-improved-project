services:
  postgis:
    image: postgis/postgis:16-3.4
    container_name: simworld_postgis
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - sionna-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: simworld_backend
    ports:
      - '8888:8000'
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      CUDA_VISIBLE_DEVICES: '-1'
      PYOPENGL_PLATFORM: 'egl'
      PYRENDER_BACKEND: 'pyglet'
      PYTHONUNBUFFERED: '1'
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgis:5432/${POSTGRES_DB}
    networks:
      - sionna-net
    depends_on:
      postgis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c 'import socket; s=socket.create_connection((\"localhost\",8000),timeout=5)' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile   # ✅ 放在 build 裡
    container_name: simworld_frontend
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    networks:
      - sionna-net
    depends_on:
      backend:
        condition: service_healthy

  ngrok:
    image: ngrok/ngrok:latest
    container_name: simworld_ngrok
    # ✅ v3 正確寫法，這裡只啟動 ngrok.yml 裡的 frontend tunnel
    command: ["ngrok", "start", "--config", "/app/ngrok.yml", "frontend"]
    volumes:
      - ./ngrok.yml:/app/ngrok.yml
    network_mode: "host"
    depends_on:
      - frontend

networks:
  sionna-net:
    driver: bridge

volumes:
  postgres_data:
  node_modules:
